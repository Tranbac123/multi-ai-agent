"""Development Docker Compose configuration for multi-tenant AIaaS platform."""

version: '3.8'

services:
  # Database
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: aiaas_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NATS
  nats:
    image: nats:2.10-alpine
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["-js", "-m", "8222"]
    healthcheck:
      test: ["CMD", "nats", "server", "check", "jetstream"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vector Database
  chroma:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
    volumes:
      - chroma_data:/chroma/chroma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:16686"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.api-gateway
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/aiaas_platform
      REDIS_URL: redis://redis:6379/0
      NATS_URL: nats://nats:4222
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Router Service
  router-service:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.router-service
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/aiaas_platform
      REDIS_URL: redis://redis:6379/0
      NATS_URL: nats://nats:4222
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Orchestrator
  orchestrator:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.orchestrator
    ports:
      - "8081:8081"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/aiaas_platform
      REDIS_URL: redis://redis:6379/0
      NATS_URL: nats://nats:4222
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Realtime Service
  realtime:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.realtime
    ports:
      - "8082:8082"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/aiaas_platform
      REDIS_URL: redis://redis:6379/0
      NATS_URL: nats://nats:4222
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Analytics Service
  analytics_service:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.analytics_service
    ports:
      - "8083:8083"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/aiaas_platform
      REDIS_URL: redis://redis:6379/0
      NATS_URL: nats://nats:4222
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Billing Service
  billing-service:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.billing-service
    ports:
      - "8084:8084"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/aiaas_platform
      REDIS_URL: redis://redis:6379/0
      NATS_URL: nats://nats:4222
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  chroma_data:
  prometheus_data:
  grafana_data:
