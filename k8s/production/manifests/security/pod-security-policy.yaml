# Pod Security Policy and Security Context for Multi-Tenant AIaaS Platform

---
# Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ai-platform-psp
  namespace: production
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true
  hostNetwork: false
  hostIPC: false
  hostPID: false

---
# ClusterRole for Pod Security Policy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ai-platform-psp-user
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - ai-platform-psp

---
# ClusterRoleBinding for Pod Security Policy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ai-platform-psp-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ai-platform-psp-user
subjects:
- kind: ServiceAccount
  name: default
  namespace: production

---
# Security Context Constraints for OpenShift (if applicable)
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: ai-platform-scc
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: false
allowPrivilegedContainer: false
allowedCapabilities: null
defaultAddCapabilities: null
fsGroup:
  type: MustRunAs
  ranges:
  - min: 1000
    max: 65535
readOnlyRootFilesystem: true
requiredDropCapabilities:
- ALL
runAsUser:
  type: MustRunAsNonRoot
  uid: 1000
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret

---
# Network Security Policy for DNS
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: production
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Network Security Policy for NTP
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ntp
  namespace: production
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 123

---
# Pod Disruption Budget for High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: api-gateway

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: router_service-pdb
  namespace: production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: router_service

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: orchestrator-pdb
  namespace: production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: orchestrator

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: realtime-pdb
  namespace: production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: realtime

---
# Resource Quotas for namespace isolation
apiVersion: v1
kind: ResourceQuota
metadata:
  name: production-quota
  namespace: production
spec:
  hard:
    requests.cpu: "10"
    requests.memory: 20Gi
    limits.cpu: "20"
    limits.memory: 40Gi
    pods: "50"
    services: "10"
    secrets: "20"
    configmaps: "20"
    persistentvolumeclaims: "10"

---
# Limit Range for resource constraints
apiVersion: v1
kind: LimitRange
metadata:
  name: production-limits
  namespace: production
spec:
  limits:
  - default:
      cpu: "1"
      memory: "2Gi"
    defaultRequest:
      cpu: "100m"
      memory: "256Mi"
    type: Container
  - max:
      cpu: "2"
      memory: "4Gi"
    min:
      cpu: "50m"
      memory: "128Mi"
    type: Container

---
# Service Account for each service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-gateway-sa
  namespace: production
  labels:
    app: api-gateway

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: router_service-sa
  namespace: production
  labels:
    app: router_service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orchestrator-sa
  namespace: production
  labels:
    app: orchestrator

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: realtime-sa
  namespace: production
  labels:
    app: realtime

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: analytics-service-sa
  namespace: production
  labels:
    app: analytics-service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: billing-service-sa
  namespace: production
  labels:
    app: billing-service

---
# Role for service-specific permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: service-role
  namespace: production
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
# RoleBinding for service accounts
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: service-role-binding
  namespace: production
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: service-role
subjects:
- kind: ServiceAccount
  name: api-gateway-sa
- kind: ServiceAccount
  name: router_service-sa
- kind: ServiceAccount
  name: orchestrator-sa
- kind: ServiceAccount
  name: realtime-sa
- kind: ServiceAccount
  name: analytics-service-sa
- kind: ServiceAccount
  name: billing-service-sa
