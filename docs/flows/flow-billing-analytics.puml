@startuml Flow-Billing-Analytics
title Billing and Analytics Flow - Usage Tracking and Invoice Generation

participant "API Gateway\n:8000" as APIGateway
participant "Model Gateway\n:8080" as ModelGateway
participant "Tools Service\n:8082" as ToolsService
participant "Usage Metering\n:8095" as UsageMetering
participant "Billing Service\n:8006" as BillingService
participant "Analytics Service\n:8004" as AnalyticsService
participant "Audit Log\n:8096" as AuditLog
participant "PostgreSQL\n:5432" as Postgres
participant "Redis\n:6379" as Redis
participant "NATS\n:4222" as NATS
participant "Stripe API\n(Payments)" as Stripe
participant "Web Frontend\n:3000" as WebFrontend
participant "Admin Portal\n:8099" as AdminPortal

== Real-time Usage Tracking and Billing ==
APIGateway -> UsageMetering : 1. POST /usage\nHeaders: X-Tenant-Id: tenant_123, X-Service: api-gateway\nBody: {service: "api-gateway", endpoint: "/ask", tokens_used: 150, cost: 0.001, timestamp: "2024-01-15T10:30:00Z"}

UsageMetering -> Postgres : 2. INSERT INTO usage_log\nBody: {tenant_id: "tenant_123", service: "api-gateway", endpoint: "/ask", tokens: 150, cost: 0.001, timestamp: "2024-01-15T10:30:00Z"}

UsageMetering -> Redis : 3. INCR tenant:tenant_123:usage:api_gateway\nReal-time usage counter
UsageMetering -> Redis : 4. INCRBY tenant:tenant_123:cost:current_month\nAdd to monthly cost

UsageMetering -> Postgres : 5. UPDATE tenant_usage\nSET current_month_tokens = current_month_tokens + 150,\ncurrent_month_cost = current_month_cost + 0.001\nWHERE tenant_id = 'tenant_123'

== Cost Threshold Check ==
UsageMetering -> Postgres : 6. SELECT * FROM tenant_limits\nWHERE tenant_id = 'tenant_123'
Postgres --> UsageMetering : {monthly_limit: 100.00, current_cost: 45.67, alert_threshold: 80.00}

alt Cost threshold exceeded
    UsageMetering -> BillingService : 7. POST /alerts/cost_threshold\nBody: {tenant_id: "tenant_123", current_cost: 81.23, limit: 100.00, threshold: 80.00}
    BillingService -> NATS : 8. PUBLISH tenant.alerts.cost_warning\n{tenant_id: "tenant_123", alert_type: "cost_threshold", severity: "warning"}
end

== Model Gateway Usage Tracking ==
ModelGateway -> UsageMetering : 9. POST /usage\nBody: {service: "model-gateway", provider: "openai", model: "gpt-4o-mini", input_tokens: 1200, output_tokens: 380, cost: 0.024}

UsageMetering -> Postgres : 10. INSERT INTO model_usage\nBody: {tenant_id: "tenant_123", provider: "openai", model: "gpt-4o-mini", input_tokens: 1200, output_tokens: 380, cost: 0.024}

== Tools Service Usage ==
ToolsService -> UsageMetering : 11. POST /usage\nBody: {service: "tools-service", tool: "web_search", api_calls: 1, cost: 0.005, provider: "firecrawl"}

UsageMetering -> Postgres : 12. INSERT INTO tool_usage\nBody: {tenant_id: "tenant_123", tool: "web_search", api_calls: 1, cost: 0.005}

== Analytics and KPI Calculation ==
AnalyticsService -> Postgres : 13. SELECT * FROM usage_log\nWHERE tenant_id = 'tenant_123'\nAND created_at >= '2024-01-01'
Postgres --> AnalyticsService : Usage data for current month

AnalyticsService -> AnalyticsService : 14. Calculate KPIs:\n- Total API calls: 1,247\n- Average response time: 2.3s\n- Success rate: 98.5%\n- Cost per request: $0.037\n- Peak usage: 14:30-15:00

AnalyticsService -> Redis : 15. SET analytics:tenant_123:daily\nCache daily analytics for 24 hours

== Dashboard Data Generation ==
WebFrontend -> AnalyticsService : 16. GET /analytics/tenant_123/kpis\nHeaders: Authorization: Bearer jwt_token
AnalyticsService -> Postgres : 17. SELECT * FROM usage_analytics\nWHERE tenant_id = 'tenant_123'\nORDER BY date DESC LIMIT 30

AnalyticsService --> WebFrontend : 18. 200 OK\n{kpis: {total_requests: 1247, avg_response_time: 2.3, success_rate: 98.5, monthly_cost: 45.67, peak_hour: "14:30-15:00"}, trends: {...}}

== Admin Portal Analytics ==
AdminPortal -> AnalyticsService : 19. GET /admin/analytics/summary\nHeaders: Authorization: Bearer admin_jwt
AnalyticsService -> Postgres : 20. SELECT COUNT(*) as total_tenants,\nSUM(current_month_cost) as total_revenue,\nAVG(success_rate) as avg_success_rate\nFROM tenant_analytics

AnalyticsService --> AdminPortal : 21. 200 OK\n{summary: {total_tenants: 156, total_revenue: 12543.67, avg_success_rate: 97.8, active_tenants: 142}}

== Billing and Invoice Generation ==
BillingService -> Postgres : 22. SELECT * FROM tenant_usage\nWHERE billing_cycle_end <= NOW()\nAND invoice_status = 'pending'
Postgres --> BillingService : Tenants due for billing

loop For each tenant
    BillingService -> Postgres : 23. SELECT * FROM usage_log\nWHERE tenant_id = 'tenant_456'\nAND created_at >= '2023-12-01'\nAND created_at < '2024-01-01'
    
    BillingService -> BillingService : 24. Generate invoice:\n- Base subscription: $50.00\n- API usage: $23.45\n- Tool usage: $5.67\n- Total: $79.12
    
    BillingService -> Postgres : 25. INSERT INTO invoices\nBody: {tenant_id: "tenant_456", amount: 79.12, period: "2023-12", status: "generated", due_date: "2024-01-15"}
    
    BillingService -> Stripe : 26. POST /v1/invoices\nHeaders: Authorization: Bearer sk_test_xxx\nBody: {customer: "cus_tenant_456", amount: 7912, currency: "usd", description: "AI Platform Usage - December 2023"}
    Stripe --> BillingService : 200 OK\n{id: "in_1ABC123", status: "draft", hosted_invoice_url: "https://invoice.stripe.com/i/..."}
    
    BillingService -> NATS : 27. PUBLISH tenant.billing.invoice_generated\n{tenant_id: "tenant_456", invoice_id: "in_1ABC123", amount: 79.12}
end

== Payment Processing ==
Stripe -> BillingService : 28. POST /webhooks/stripe\nHeaders: X-Stripe-Signature: t=1234567890,v1=xxx\nBody: {type: "invoice.payment_succeeded", data: {object: {id: "in_1ABC123", customer: "cus_tenant_456", amount_paid: 7912}}}

BillingService -> Postgres : 29. UPDATE invoices\nSET status = 'paid', paid_at = NOW()\nWHERE stripe_invoice_id = 'in_1ABC123'

BillingService -> NATS : 30. PUBLISH tenant.billing.payment_succeeded\n{tenant_id: "tenant_456", invoice_id: "in_1ABC123", amount: 79.12}

== Audit and Compliance Tracking ==
AuditLog -> Postgres : 31. INSERT INTO audit_events\nBody: {tenant_id: "tenant_123", action: "usage_tracked", service: "api-gateway", user_id: "user_456", timestamp: "2024-01-15T10:30:00Z", metadata: {tokens: 150, cost: 0.001}}

AuditLog -> Postgres : 32. INSERT INTO compliance_log\nBody: {tenant_id: "tenant_123", event_type: "data_access", data_type: "usage_metrics", access_method: "api", timestamp: "2024-01-15T10:30:00Z"}

== Real-time Monitoring and Alerts ==
AnalyticsService -> NATS : 33. PUBLISH system.metrics.usage_spike\n{tenant_id: "tenant_123", current_rate: 45.2, threshold: 40.0, alert_level: "warning"}

AnalyticsService -> Redis : 34. SET alert:tenant_123:usage_spike\nCache alert state for 1 hour

== Error Handling ==
alt Usage tracking fails
    UsageMetering --> APIGateway : 500 Error\n{error: "Database connection failed"}
    APIGateway -> Redis : 35. SET failed_usage:tenant_123:req_789\nQueue for retry
    APIGateway -> NATS : 36. PUBLISH system.errors.usage_tracking_failed\n{tenant_id: "tenant_123", error: "Database connection failed", retry_count: 1}
end

alt Billing service unavailable
    BillingService --> AnalyticsService : 503 Service Unavailable\n{error: "Billing service maintenance"}
    AnalyticsService -> Redis : 37. SET billing_maintenance:true\nCache maintenance state
    note right of AnalyticsService : Graceful degradation\nContinue analytics without billing data
end

== Background Processing ==
note over UsageMetering, Postgres : Background: Usage aggregation\nCost optimization analysis\nAnomaly detection\nCompliance reporting\nRevenue forecasting

@enduml
