📋 Method 1: Start Individual Services by Name
# Start infrastructure services first (dependencies)
docker-compose -f docker-compose.local.yml up -d postgres
docker-compose -f docker-compose.local.yml up -d redis
docker-compose -f docker-compose.local.yml up -d nats

# Wait for infrastructure to be healthy, then start backend services
docker-compose -f docker-compose.local.yml up -d api-gateway
docker-compose -f docker-compose.local.yml up -d model-gateway
docker-compose -f docker-compose.local.yml up -d retrieval-service
docker-compose -f docker-compose.local.yml up -d tools-service
docker-compose -f docker-compose.local.yml up -d router-service

# Start control plane services
docker-compose -f docker-compose.local.yml up -d config-service
docker-compose -f docker-compose.local.yml up -d policy-adapter

# Start frontend services
docker-compose -f docker-compose.local.yml up -d admin-portal
docker-compose -f docker-compose.local.yml up -d web-frontend
docker-compose -f docker-compose.local.yml up -d ai-chatbot

📋 Method 2: Start by Service Type
# Start infrastructure services first
docker-compose -f docker-compose.local.yml up -d postgres redis nats

# Wait a moment for them to initialize, then start backend
docker-compose -f docker-compose.local.yml up -d api-gateway model-gateway retrieval-service

# Start remaining backend services
docker-compose -f docker-compose.local.yml up -d tools-service router-service

# Start control plane
docker-compose -f docker-compose.local.yml up -d config-service policy-adapter

# Start frontend services
docker-compose -f docker-compose.local.yml up -d admin-portal web-frontend ai-chatbot

📋 Method 3: Start with Health Checks
# Start infrastructure and wait for health
docker-compose -f docker-compose.local.yml up -d postgres redis nats

# Check if they're healthy
docker-compose -f docker-compose.local.yml ps

# Start API gateway (depends on infrastructure)
docker-compose -f docker-compose.local.yml up -d api-gateway

# Wait for API gateway to be ready, then start other services
docker-compose -f docker-compose.local.yml up -d model-gateway
docker-compose -f docker-compose.local.yml up -d retrieval-service

📋 Method 4: Start with Logs Monitoring
# Start a service and watch its logs
docker-compose -f docker-compose.local.yml up -d postgres
docker-compose -f docker-compose.local.yml logs -f postgres

# In another terminal, start the next service
docker-compose -f docker-compose.local.yml up -d redis
docker-compose -f docker-compose.local.yml logs -f redis

📋 Method 5: Start Specific Services for Testing
# Start just the chatbot and its dependencies
docker-compose -f docker-compose.local.yml up -d postgres redis nats
docker-compose -f docker-compose.local.yml up -d api-gateway
docker-compose -f docker-compose.local.yml up -d ai-chatbot

# Or start just the web frontend
docker-compose -f docker-compose.local.yml up -d postgres redis nats
docker-compose -f docker-compose.local.yml up -d api-gateway
docker-compose -f docker-compose.local.yml up -d web-frontend

how to stop docker

I'll show you how to stop the Docker services. Here are the commands to stop your running containers:
docker-compose -f docker-compose.local.yml down
Let me check if all containers are stopped:
NAME      IMAGE     COMMAND   SERVICE   CREATED   STATUS    PORTS
Perfect! All Docker containers have been stopped. Here's a summary of the Docker stop commands:
🛑 Docker Stop Commands
✅ All Services Stopped
Your Docker services have been successfully stopped. Here are the different ways to manage Docker:
📋 Docker Management Commands:
Stop All Services:
Stop Specific Services:
Stop and Remove Everything:
View Running Services:
ocker-compose.local.y
🔄 To Start Again:
�� Quick Reference:
down = Stop and remove containers
stop = Stop containers but keep them
up -d = Start in background (detached mode)
logs -f = Follow logs in real-time
ps = Show running containers
All your Docker services are now stopped! 🎉
how to stop one by one

I'll show you how to stop Docker services one by one. Let me demonstrate the different ways to do this:
Let me show you the different ways to stop Docker services one by one:
�� Stop Docker Services One by One
�� Method 1: Stop Individual Services by Name
📋 Method 2: Stop by Service Type
�� Method 3: Stop and Remove Individual Containers
📋 Method 4: Stop Services in Dependency Order
📋 Method 5: Check Status Before Stopping
📋 Method 6: Stop Services with Logs
🔍 Useful Commands:
compose
💡 Pro Tips:
Stop in reverse dependency order - Stop services that depend on others first
Use stop vs down - stop keeps containers, down removes them
Check logs before stopping - Useful for debugging
Stop infrastructure last - Database and message queues should be stopped after applications
Choose the method that works best for your needs! 🚀
How can I start one-by-one services?

I'll show you how to start Docker services one by one. Here are the different methods:
🚀 Start Docker Services One by One
📋 Method 1: Start Individual Services by Name
docker
📋 Method 2: Start by Service Type
📋 Method 3: Start with Health Checks
# Start infrastructure and wait for health
docker-compose -f docker-compose.local.yml up -d postgres redis nats

# Check if they're healthy
docker-compose -f docker-compose.local.yml ps

# Start API gateway (depends on infrastructure)
docker-compose -f docker-compose.local.yml up -d api-gateway

# Wait for API gateway to be ready, then start other services
docker-compose -f docker-compose.local.yml up -d model-gateway
docker-compose -f docker-compose.local.yml up -d retrieval-service
📋 Method 4: Start with Logs Monitoring
# Start a service and watch its logs
docker-compose -f docker-compose.local.yml up -d postgres
docker-compose -f docker-compose.local.yml logs -f postgres

# In another terminal, start the next service
docker-compose -f docker-compose.local.yml up -d redis
docker-compose -f docker-compose.local.yml logs -f redis
📋 Method 5: Start Specific Services for Testing
# Start just the chatbot and its dependencies
docker-compose -f docker-compose.local.yml up -d postgres redis nats
docker-compose -f docker-compose.local.yml up -d api-gateway
docker-compose -f docker-compose.local.yml up -d ai-chatbot

# Or start just the web frontend
docker-compose -f docker-compose.local.yml up -d postgres redis nats
docker-compose -f docker-compose.local.yml up -d api-gateway
docker-compose -f docker-compose.local.yml up -d web-frontend

📋 Method 6: Start with Dependency Order
# 1. Infrastructure (no dependencies)
docker-compose -f docker-compose.local.yml up -d postgres
sleep 5
docker-compose -f docker-compose.local.yml up -d redis
sleep 2
docker-compose -f docker-compose.local.yml up -d nats

# 2. Core backend services
docker-compose -f docker-compose.local.yml up -d api-gateway
sleep 3
docker-compose -f docker-compose.local.yml up -d model-gateway

# 3. Other backend services
docker-compose -f docker-compose.local.yml up -d retrieval-service
docker-compose -f docker-compose.local.yml up -d tools-service
docker-compose -f docker-compose.local.yml up -d router-service

# 4. Control plane
docker-compose -f docker-compose.local.yml up -d config-service
docker-compose -f docker-compose.local.yml up -d policy-adapter

# 5. Frontend services
docker-compose -f docker-compose.local.yml up -d admin-portal
docker-compose -f docker-compose.local.yml up -d web-frontend
docker-compose -f docker-compose.local.yml up -d ai-chatbot

�� Useful Commands for Monitoring:
# Check status of all services
docker-compose -f docker-compose.local.yml ps

# Check logs for a specific service
docker-compose -f docker-compose.local.yml logs ai-chatbot

# Follow logs in real-time
docker-compose -f docker-compose.local.yml logs -f api-gateway

# Check health of infrastructure
docker-compose -f docker-compose.local.yml ps postgres redis nats

📋 Quick Start Scripts:
You can also create custom start scripts:
# Create a script to start just the chatbot
echo '#!/bin/bash
docker-compose -f docker-compose.local.yml up -d postgres redis nats
sleep 5
docker-compose -f docker-compose.local.yml up -d api-gateway
sleep 3
docker-compose -f docker-compose.local.yml up -d ai-chatbot
echo "Chatbot is ready at http://localhost:3001"' > start-chatbot.sh

chmod +x start-chatbot.sh
./start-chatbot.sh


🚀 Start Docker Services One by One
📋 Method 1: Start Individual Services by Name
docker
📋 Method 2: Start by Service Type
📋 Method 3: Start with Health Checks
.
📋 Method 4: Start with Logs Monitoring
l
📋 Method 5: Start Specific Services for Testing
📋 Method 6: Start with Dependency Order
Fro
�� Useful Commands for Monitoring:
📋 Quick Start Scripts:
You can also create custom start scripts:
# Create a script to start just the chatbot
echo '#!/bin/bash
docker-compose -f docker-compose.local.yml up -d postgres redis nats
sleep 5
docker-compose -f docker-compose.local.yml up -d api-gateway
sleep 3
docker-compose -f docker-compose.local.yml up -d ai-chatbot
echo "Chatbot is ready at http://localhost:3001"' > start-chatbot.sh

chmod +x start-chatbot.sh
./start-chatbot.sh
