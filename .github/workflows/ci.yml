name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and test all services
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            api-gateway,
            orchestrator,
            router-service,
            model-gateway,
            retrieval-service,
            ingestion-service,
            analytics-service,
            billing-service,
            realtime-gateway,
            config-service,
            usage-metering,
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('services/' + matrix.service + '/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

        - name: Install dependencies
          run: |
            # Determine service path based on service name
            if [[ "${{ matrix.service }}" =~ ^(api-gateway|model-gateway|orchestrator|router-service|realtime-gateway|ingestion-service|analytics-service|retrieval-service|tools-service|memory-service|chat-adapters|semantic-cache-service|event-relay-service|migration-runner|agents-service|eval-service)$ ]]; then
              SERVICE_PATH="apps/data-plane/${{ matrix.service }}"
            else
              SERVICE_PATH="apps/control-plane/${{ matrix.service }}"
            fi
            
            cd $SERVICE_PATH
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest pytest-cov black flake8 mypy

      - name: Run linting
        run: |
          # Determine service path based on service name
          if [[ "${{ matrix.service }}" =~ ^(api-gateway|model-gateway|orchestrator|router-service|realtime-gateway|ingestion-service|analytics-service|retrieval-service|tools-service|memory-service|chat-adapters|semantic-cache-service|event-relay-service|migration-runner|agents-service|eval-service)$ ]]; then
            SERVICE_PATH="apps/data-plane/${{ matrix.service }}"
          else
            SERVICE_PATH="apps/control-plane/${{ matrix.service }}"
          fi
          
          cd $SERVICE_PATH
          python -m black --check src/ tests/
          python -m flake8 src/ tests/
          python -m mypy src/

      - name: Run tests
        run: |
          # Determine service path based on service name
          if [[ "${{ matrix.service }}" =~ ^(api-gateway|model-gateway|orchestrator|router-service|realtime-gateway|ingestion-service|analytics-service|retrieval-service|tools-service|memory-service|chat-adapters|semantic-cache-service|event-relay-service|migration-runner|agents-service|eval-service)$ ]]; then
            SERVICE_PATH="apps/data-plane/${{ matrix.service }}"
          else
            SERVICE_PATH="apps/control-plane/${{ matrix.service }}"
          fi
          
          cd $SERVICE_PATH
          python -m pytest tests/ -v --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          # Determine service path based on service name
          file: ${{ contains('api-gateway,model-gateway,orchestrator,router-service,realtime-gateway,ingestion-service,analytics-service,retrieval-service,tools-service,memory-service,chat-adapters,semantic-cache-service,event-relay-service,migration-runner,agents-service,eval-service', matrix.service) && 'apps/data-plane/' || 'apps/control-plane/' }}${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Contract tests
  contract-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install jsonschema pytest

      - name: Validate event schemas
        run: |
          python -m pytest contract-tests/ -v

      - name: Check schema compatibility
        run: |
          python scripts/check_schema_compatibility.py

  # Build Docker images
  build:
    runs-on: ubuntu-latest
    needs: [test, contract-tests]
    strategy:
      matrix:
        service:
          [
            api-gateway,
            orchestrator,
            router-service,
            model-gateway,
            retrieval-service,
            ingestion-service,
            analytics-service,
            billing-service,
            realtime-gateway,
            config-service,
            usage-metering,
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Determine service path based on service name
          context: ${{ contains('api-gateway,model-gateway,orchestrator,router-service,realtime-gateway,ingestion-service,analytics-service,retrieval-service,tools-service,memory-service,chat-adapters,semantic-cache-service,event-relay-service,migration-runner,agents-service,eval-service', matrix.service) && 'apps/data-plane/' || 'apps/control-plane/' }}${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Docker Compose smoke test
  smoke-test:
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_agent
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      nats:
        image: nats:2.10-alpine
        command: ["-js", "-m", "8222"]
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:8222/healthz"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create environment file
        run: |
          cat > dev-env/.env << EOF
          DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_agent
          REDIS_URL=redis://redis:6379
          NATS_URL=nats://nats:4222
          JWT_SECRET_KEY=test-secret-key
          OPENAI_API_KEY=test-key
          ANTHROPIC_API_KEY=test-key
          FIRECRAWL_API_KEY=test-key
          EOF

      - name: Start core services
        run: |
          cd dev-env
          docker-compose --profile core up -d --build

      - name: Wait for services to be ready
        run: |
          sleep 30
          # Check API Gateway health
          curl -f http://localhost:8000/healthz || exit 1
          # Check Orchestrator health
          curl -f http://localhost:8081/healthz || exit 1
          # Check Router Service health
          curl -f http://localhost:8083/healthz || exit 1

      - name: Run smoke tests
        run: |
          # Test API Gateway
          curl -f http://localhost:8000/healthz
          curl -f http://localhost:8000/readyz

          # Test Orchestrator
          curl -f http://localhost:8081/healthz
          curl -f http://localhost:8081/readyz

          # Test Router Service
          curl -f http://localhost:8083/healthz
          curl -f http://localhost:8083/readyz

      - name: Show logs on failure
        if: failure()
        run: |
          cd dev-env
          docker-compose logs

  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Deploy to staging (on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, smoke-test, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # For example: kubectl apply -f k8s/staging/
