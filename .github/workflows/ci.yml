name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pre-commit
        run: |
          pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

  linting:
    name: Code Quality (Black, Ruff, MyPy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy pytest
      - name: Run Black formatter
        run: black --check --diff .
      - name: Run Ruff linter
        run: ruff check .
      - name: Run MyPy type checker
        run: mypy . --ignore-missing-imports

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term-missing
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio redis
      - name: Run integration tests
        run: pytest tests/integration/ -v --tb=short

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio
      - name: Run E2E tests
        run: pytest tests/e2e/ -v --tb=short

  performance-tests:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest locust
      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --tb=short
          python scripts/performance_regression_check.py
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: reports/performance/

  flakiness-detection:
    name: Flakiness Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
      - name: Run flakiness detection
        run: |
          python scripts/flakiness_ci_integration.py --max-retries 3
      - name: Upload flakiness reports
        uses: actions/upload-artifact@v4
        with:
          name: flakiness-reports
          path: reports/flakiness/

  security-scan:
    name: Security Scan (SAST/DAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run Bandit security scan
        run: bandit -r . -f json -o reports/security/bandit-report.json || true
      - name: Run Safety dependency scan
        run: safety check --json --output reports/security/safety-report.json || true
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/security/

  observability-tests:
    name: Observability Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
      - name: Run observability tests
        run: pytest tests/observability/ -v --tb=short

  chaos-tests:
    name: Chaos Engineering Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
      - name: Run chaos tests
        run: pytest tests/chaos/ -v --tb=short

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
      - name: Run contract tests
        run: pytest tests/contract/ -v --tb=short

  realtime-tests:
    name: Realtime & WebSocket Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
      - name: Run realtime tests
        run: pytest tests/realtime/ -v --tb=short

  parallel-test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      [
        pre-commit,
        linting,
        unit-tests,
        integration-tests,
        e2e-tests,
        performance-tests,
        flakiness-detection,
        security-scan,
        observability-tests,
        chaos-tests,
        contract-tests,
        realtime-tests,
      ]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Pre-commit: ${{ needs.pre-commit.result }}"
          echo "Linting: ${{ needs.linting.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Flakiness Detection: ${{ needs.flakiness-detection.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Observability Tests: ${{ needs.observability-tests.result }}"
          echo "Chaos Tests: ${{ needs.chaos-tests.result }}"
          echo "Contract Tests: ${{ needs.contract-tests.result }}"
          echo "Realtime Tests: ${{ needs.realtime-tests.result }}"
      - name: Overall status
        run: |
          if [[ "${{ needs.pre-commit.result }}" == "success" && 
                "${{ needs.linting.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" && 
                "${{ needs.performance-tests.result }}" == "success" && 
                "${{ needs.observability-tests.result }}" == "success" && 
                "${{ needs.chaos-tests.result }}" == "success" && 
                "${{ needs.contract-tests.result }}" == "success" && 
                "${{ needs.realtime-tests.result }}" == "success" ]]; then
            echo "All critical tests passed!"
            exit 0
          else
            echo "Some tests failed!"
            exit 1
          fi
