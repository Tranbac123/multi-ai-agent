name: "Reusable Service CI/CD"

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      service-path:
        required: true
        type: string
      dockerfile-path:
        required: false
        type: string
        default: "Dockerfile"
      python-version:
        required: false
        type: string
        default: "3.11"
      node-version:
        required: false
        type: string
        default: "18"
      enable-docker:
        required: false
        type: boolean
        default: true
      enable-helm:
        required: false
        type: boolean
        default: true
    secrets:
      DOCKER_REGISTRY_URL:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      service-changed: ${{ steps.changes.outputs.service-changed }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            service-changed:
              - '${{ inputs.service-path }}/**'
              - 'libs/**'
              - 'contracts/**'

  test:
    needs: changes
    if: needs.changes.outputs.service-changed == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          cd ${{ inputs.service-path }}
          pip install -r requirements.txt
          pip install -r requirements-dev.txt || true

      - name: Lint
        run: |
          cd ${{ inputs.service-path }}
          make lint || true

      - name: Type check
        run: |
          cd ${{ inputs.service-path }}
          make type-check || true

      - name: Test
        run: |
          cd ${{ inputs.service-path }}
          make test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ${{ inputs.service-path }}/coverage.xml

  security:
    needs: changes
    if: needs.changes.outputs.service-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "${{ inputs.service-path }}"

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r ${{ inputs.service-path }}/src/ || true

  build:
    needs: [changes, test]
    if: needs.changes.outputs.service-changed == 'true' && inputs.enable-docker
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_REGISTRY_URL }}/${{ inputs.service-name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.service-path }}/${{ inputs.dockerfile-path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    needs: [changes, build]
    if: needs.changes.outputs.service-changed == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Dev
        run: |
          cd ${{ inputs.service-path }}/deploy
          make deploy ENV=dev IMAGE_TAG=${{ needs.build.outputs.image-tag }}
